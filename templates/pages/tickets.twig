{% extends 'base.twig' %}

{% block title %}All Tickets - TicketFlow{% endblock %}

{% block styles %}
<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
{% endblock %}

{% block content %}
<div class="min-h-[calc(100vh-4rem)] bg-gray-50 py-8">
  <div class="mx-auto w-full max-w-[1440px] px-4">
    <div class="mb-8 flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between">
      <div>
        <h1 class="mb-2 text-2xl font-bold">All Tickets</h1>
        <p class="text-gray-600">Manage and track all your support tickets</p>
      </div>
      <a href="{{ base_path }}/ticket-form" class="inline-flex items-center gap-2 rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow hover:bg-blue-700">
        <i data-lucide="plus" class="h-4 w-4"></i>
        New Ticket
      </a>
    </div>
    <div class="mb-4 text-sm text-gray-600" id="resultsCount"></div>
    <div id="ticketsGrid"></div>
  </div>
</div>
{% endblock %}

{% block scripts %}
<script src="{{ base_path }}/public/js/tickets.js"></script>
<script>
  function showToast(message, type = 'success') {
    if (typeof Toastify !== 'undefined') {
      Toastify({
        text: message,
        duration: 3000,
        gravity: 'top',
        position: 'right',
        style: {
          background: type === 'success' ? 'linear-gradient(to right, #10b981, #059669)' : 'linear-gradient(to right, #ef4444, #dc2626)',
        },
      }).showToast();
    }
  }
  function getStatusColor(status) {
    switch (status) {
      case 'open': return 'bg-green-100 text-green-700';
      case 'in_progress': return 'bg-amber-100 text-amber-700';
      case 'closed': return 'bg-gray-100 text-gray-700';
      default: return 'bg-gray-100 text-gray-700';
    }
  }
  function getPriorityColor(priority) {
    switch (priority) {
      case 'low': return 'border-green-500 text-green-700';
      case 'medium': return 'border-yellow-500 text-yellow-700';
      case 'high': return 'border-orange-500 text-orange-700';
      case 'critical': return 'border-red-500 text-red-700';
      default: return 'border-gray-500 text-gray-700';
    }
  }
  const STATUS_LABELS = { open: 'Open', in_progress: 'In Progress', closed: 'Closed' };
  let deleteModal = null;
  let ticketToDelete = null;
  function renderTickets() {
    const grid = document.getElementById('ticketsGrid');
    const resultsCount = document.getElementById('resultsCount');
    const tickets = TicketManager.getTickets();
    resultsCount.textContent = `Showing ${tickets.length} ticket${tickets.length === 1 ? '' : 's'}`;
    if (!tickets.length) {
      grid.innerHTML = `<div class='flex flex-col items-center justify-center rounded-2xl border-2 border-dashed bg-white py-16 shadow-lg'><div class='mb-4 rounded-full bg-gray-100 p-6'><i data-lucide='search' class='h-12 w-12 text-gray-400'></i></div><h3 class='mb-2'>No tickets found</h3><p class='mb-6 text-gray-600'>No tickets in the system yet.</p></div>`;
      lucide.createIcons();
      return;
    }
    let html = `<div class='grid gap-6 md:grid-cols-2 lg:grid-cols-3'>`;
    for (const t of tickets) {
      html += `<div class='rounded-2xl shadow-lg transition-all hover:shadow-xl bg-white'><div class='p-6'><div class='mb-4 flex items-start justify-between gap-2'><h3 class='line-clamp-2 font-semibold'>${t.title}</h3><span class='inline-block px-2 py-1 rounded ${getStatusColor(t.status)} text-xs font-semibold'>${STATUS_LABELS[t.status]}</span></div><p class='mb-4 line-clamp-2 text-gray-600'>${t.description}</p><div class='mb-4 flex flex-wrap gap-2'><span class='inline-block border rounded px-2 py-1 text-xs font-semibold ${getPriorityColor(t.priority)}'>${t.priority}</span></div><div class='mb-4 space-y-2 text-sm text-gray-600'><div class='flex items-center gap-2'><i data-lucide='user' class='h-4 w-4'></i><span>${t.assignee}</span></div><div class='flex items-center gap-2'><i data-lucide='calendar' class='h-4 w-4'></i><span>${new Date(t.createdAt).toLocaleDateString()}</span></div></div><div class='flex gap-2'><button class='viewBtn flex-1 gap-1 rounded-md border px-2 py-1 text-xs font-medium text-blue-600 hover:bg-blue-50 flex items-center justify-center' data-id='${t.id}'><i data-lucide='eye' class='h-4 w-4'></i>View</button><button class='editBtn gap-1 rounded-md border px-2 py-1 text-xs font-medium flex items-center justify-center' data-id='${t.id}'><i data-lucide='edit' class='h-4 w-4'></i></button><button class='deleteBtn gap-1 rounded-md border px-2 py-1 text-xs font-medium text-red-600 hover:bg-red-50 hover:text-red-700 flex items-center justify-center' data-id='${t.id}'><i data-lucide='trash-2' class='h-4 w-4'></i></button></div></div></div>`;
    }
    html += '</div>';
    grid.innerHTML = html;
    lucide.createIcons();
    attachCardEventListeners();
  }
  function attachCardEventListeners() {
    document.querySelectorAll('.viewBtn').forEach(btn => {
      btn.addEventListener('click', () => {
        const id = btn.getAttribute('data-id');
        URLHelper.navigate('/ticket-detail?id=' + id);
      });
    });
    document.querySelectorAll('.editBtn').forEach(btn => {
      btn.addEventListener('click', () => {
        const id = btn.getAttribute('data-id');
        URLHelper.navigate('/ticket-form?id=' + id);
      });
    });
    document.querySelectorAll('.deleteBtn').forEach(btn => {
      btn.addEventListener('click', () => {
        ticketToDelete = btn.getAttribute('data-id');
        if (!deleteModal) {
          deleteModal = createDeleteModal();
        }
        deleteModal.classList.remove('hidden');
        deleteModal.classList.add('flex');
      });
    });
  }
  function createDeleteModal() {
    const modal = document.createElement('div');
    modal.id = 'deleteModal';
    modal.className = 'fixed inset-0 z-50 hidden items-center justify-center bg-black/40';
    modal.innerHTML = `<div class='bg-white rounded-lg p-6 max-w-sm w-full shadow-xl'><h2 class='text-lg font-bold mb-2'>Are you sure?</h2><p class='mb-4 text-gray-600'>This will permanently delete the ticket.</p><div class='flex justify-end gap-2'><button id='cancelDeleteBtn' class='rounded-md border px-4 py-2 text-sm'>Cancel</button><button id='confirmDeleteBtn' class='rounded-md bg-red-600 px-4 py-2 text-sm font-medium text-white hover:bg-red-700'>Delete</button></div></div>`;
    document.body.appendChild(modal);
    document.getElementById('cancelDeleteBtn').onclick = () => {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      ticketToDelete = null;
    };
    document.getElementById('confirmDeleteBtn').onclick = () => {
      if (ticketToDelete) {
        try {
          TicketManager.deleteTicket(ticketToDelete);
          showToast('Ticket deleted successfully!', 'success');
          renderTickets();
        } catch (err) {
          showToast(err.message || 'Failed to delete ticket', 'error');
        }
      }
      modal.classList.add('hidden');
      modal.classList.remove('flex');
      ticketToDelete = null;
    };
    return modal;
  }
  document.addEventListener('DOMContentLoaded', () => {
    if (!Auth.isAuthenticated()) {
      URLHelper.navigate('/auth/login');
      return;
    }
    renderTickets();
  });
</script>
{% endblock %}
