{% extends 'base.twig' %}

{% block title %}Sign In - TicketFlow{% endblock %}

{% block styles %}{% endblock %}

{% block content %}
<div class="flex min-h-[calc(100vh-4rem)] items-center justify-center bg-gray-50 px-4 py-12">
  <div class="mx-auto w-full max-w-[1440px]">
    <div class="mx-auto w-full max-w-md">
      <div class="mb-8 text-center">
        <div class="mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-xl bg-blue-600">
          <i data-lucide="ticket" class="h-7 w-7 text-white"></i>
        </div>
        <h1 class="mb-2 text-3xl font-bold">Welcome Back</h1>
        <p class="text-gray-600">Sign in to your account to continue</p>
      </div>

      <div class="rounded-2xl border bg-white shadow-xl">
        <div class="border-b px-6 py-4">
          <h2 class="text-xl font-semibold">Sign In</h2>
          <p class="text-sm text-gray-600 mt-1">Enter your credentials to access your account</p>
        </div>
        
        <div class="p-6">
          <form id="loginForm" class="space-y-4">
            {# Error Alert (hidden by default) #}
            <div id="errorAlert" class="hidden items-center gap-2 rounded-lg border border-red-200 bg-red-50 p-3 text-sm text-red-900">
              <i data-lucide="alert-circle" class="h-4 w-4 flex-shrink-0"></i>
              <span id="errorMessage"></span>
            </div>

            <div class="space-y-2">
              <label for="email" class="text-sm font-medium">
                Email <span class="text-red-500">*</span>
              </label>
              <input
                id="email"
                type="email"
                placeholder="name@example.com"
                required
                class="flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              />
            </div>

            <div class="space-y-2">
              <label for="password" class="text-sm font-medium">
                Password <span class="text-red-500">*</span>
              </label>
              <input
                id="password"
                type="password"
                placeholder="Enter your password"
                required
                class="flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white placeholder:text-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-600 focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
              />
            </div>

            <button
              type="submit"
              id="submitBtn"
              class="inline-flex h-10 w-full items-center justify-center rounded-md bg-blue-600 px-4 py-2 text-sm font-medium text-white shadow transition-colors hover:bg-blue-700 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-600 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50"
            >
              Sign In
            </button>

            <div class="text-center text-sm text-gray-600">
              Don't have an account?
              <a href="{{ base_path }}/register" class="text-blue-600 hover:underline">
                Sign up
              </a>
            </div>

            <div class="rounded-lg border bg-blue-50 p-3 text-sm text-blue-900">
              <p class="mb-1 font-medium">Demo credentials:</p>
              <p class="text-xs">Email: any valid email</p>
              <p class="text-xs">Password: any password</p>
              <p class="text-xs text-blue-700 mt-1">
                Tip: Use "admin@example.com" to log in as admin
              </p>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</div>
{% endblock %}

{% block scripts %}
<script>
  // Initialize Lucide icons after DOM loads
  document.addEventListener('DOMContentLoaded', () => {
    lucide.createIcons();
  });

  const loginForm = document.getElementById('loginForm');
  const emailInput = document.getElementById('email');
  const passwordInput = document.getElementById('password');
  const submitBtn = document.getElementById('submitBtn');
  const errorAlert = document.getElementById('errorAlert');
  const errorMessage = document.getElementById('errorMessage');

  // Show error function
  function showError(message) {
    errorMessage.textContent = message;
    errorAlert.classList.remove('hidden');
    errorAlert.classList.add('flex');
    lucide.createIcons();
  }

  // Hide error function
  function hideError() {
    errorAlert.classList.add('hidden');
    errorAlert.classList.remove('flex');
  }

  // Show toast notification
  function showToast(message, type = 'success') {
    Toastify({
      text: message,
      duration: 3000,
      gravity: 'top',
      position: 'right',
      style: {
        background: type === 'success' 
          ? 'linear-gradient(to right, #10b981, #059669)' 
          : 'linear-gradient(to right, #ef4444, #dc2626)',
      },
    }).showToast();
  }

  // Handle form submission
  loginForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    hideError();

    const email = emailInput.value.trim();
    const password = passwordInput.value.trim();

    if (!email || !password) {
      showError('Please fill in all fields');
      return;
    }

    // Disable form
    submitBtn.disabled = true;
    submitBtn.textContent = 'Signing in...';
    emailInput.disabled = true;
    passwordInput.disabled = true;

    try {
      const result = await Auth.login(email, password);

      if (result.success) {
        showToast('Welcome back! You have successfully logged in.', 'success');
        
        // Redirect to dashboard after a short delay
        setTimeout(() => {
          URLHelper.navigate('/dashboard');
        }, 1000);
      } else {
        const errorMsg = result.error || 'Incorrect email or password. Please try again.';
        showError(errorMsg);
        showToast(errorMsg, 'error');
        
        // Re-enable form
        submitBtn.disabled = false;
        submitBtn.textContent = 'Sign In';
        emailInput.disabled = false;
        passwordInput.disabled = false;
      }
    } catch (error) {
      console.error('Login error:', error);
      const errorMsg = 'Failed to sign in. Please retry.';
      showError(errorMsg);
      showToast(errorMsg, 'error');
      
      // Re-enable form
      submitBtn.disabled = false;
      submitBtn.textContent = 'Sign In';
      emailInput.disabled = false;
      passwordInput.disabled = false;
    }
  });
</script>
{% endblock %}
